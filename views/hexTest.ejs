<!DOCTYPE html>
<html>
<head>
  <%- include("head", {beta: false, modal: false})%>
  <title>Shapes</title>
  <link rel="stylesheet" href="/css/hexTest.css">
  <link rel="stylesheet" href="/lib/highlightjs/styles/monokai-sublime.css">
  <script src="/js/color.js"></script>
  <script src="/lib/highlightjs/highlight.pack.js"></script>
  <script src="/js/hexTest.js" defer type="module"></script>
  <script src="/js/shapeDocs.js" defer type="module"></script>
  <!--<script src="/lib/highlightjs/lib/languages/htmlbars.js"></script>
  <script src="/lib/highlightjs/lib/languages/javascript.js"></script>-->
</head>
<body>
  <%- include("header", {title: "Shapes", choice: true}) %>
  <div id="content">
    <canvas id="canvas" width="300" height="300">This program is not supported by your browser</canvas>
    <div id="menu">
      <div id="tabScrollHide">
        <div id="menuTabs">
          <div id="newShape" class="menuTab">&plus;</div>
          <div id="line"></div>
        </div>
      </div>
      <div id="mainMenu">
        <div id="mainMenuOptions">
          Position:
          <div class="indent">
            <div class="property">x: <input id="x" type="number" step required class="descrete"></div>
            <div class="property">y: <input id="y" type="number" required class="descrete"></div>
          </div>
          <div class="property">Width: <input id="widthT" type="number" required class="descrete" min="0" max="300"></div>
          <div class="indent">
            <input id="widthS" type="range" min="0" max="300">
          </div>
          <div id="rotations">
            Rotations:
            <div class="indent">
              <div class="property">
                x: 
                <input id="x-axis-rotation" type="number" step="1" class="descrete text" required min="0" max="360">
                <div class="radio"><input id="x-deg-radio" type="radio" name="x-axis-rotation-unit" value="deg"><label for="x-deg-radio">Degrees</label></div>
                <div class="radio"><input id="x-rad-radio" type="radio" name="x-axis-rotation-unit" value="rad"><label for="x-rad-radio">Radians</label></div>
              </div>
              <input id="x-axis-rotation-slider" class="indent" type="range" step="1" min="0" max="360">
              <div class="property">
                y:
                <input id="y-axis-rotation" type="number" step="1" class="descrete text" required min="0" max="360">
                <div class="radio"><input id="y-deg-radio" type="radio" name="y-axis-rotation-unit" value="deg"><label for="y-deg-radio">Degrees</label></div>
                <div class="radio"><input id="y-rad-radio" type="radio" name="y-axis-rotation-unit" value="rad"><label for="y-rad-radio">Radians</label></div>
              </div>
              <input id="y-axis-rotation-slider" class="indent" type="range" step="1" min="0" max="360">
              <div class="property">
                z:
                <input id="z-axis-rotation" type="number" step="1" class="descrete text" required min="0" max="360">
                <div class="radio"><input id="z-deg-radio" type="radio" name="z-axis-rotation-unit" value="deg"><label for="z-deg-radio">Degrees</label></div>
                <div class="radio"><input id="z-rad-radio" type="radio" name="z-axis-rotation-unit" value="rad"><label for="z-rad-radio">Radians</label></div>
              </div>
              <input id="z-axis-rotation-slider" class="indent" type="range" step="1" min="0" max="360">
            </div>
          </div>
        </div>
        <div id="bottom">
          <input type="button" id="delete" class="no" value="Discard">
          <input type="button" id="visibilityToggle" value="Hide">
        </div>
      </div>
      <div class="seperator"></div>
      <div id="colorMenu">
        Color:
        <div id="colorHSL">
          <div id="h" class="hslGrid">
            <input id="ht" type="number" required  class="descrete t" value="360"
              pattern="^(?:36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])?$">
            <div id="h-key" class="s">
              <input id="hs" type="range" value="0" min="0" max="360">
            </div>
          </div>
          <div id="s" class="hslGrid">
            <input id="st" type="number" required  class="descrete t" value="100" pattern="^[0-9][0-9]?$|^100$">
            <div id="s-key" class="s">
              <input id="ss" type="range" value="100" min="0" max="100">
            </div>
          </div>
          <div id="l" class="hslGrid">
            <input id="lt" type="number" required  class="descrete t" value="50" pattern="^[0-9][0-9]?$|^100$">
            <div id="l-key" class="s">
              <input id="ls" type="range" value="50" min="0" max="100">
            </div>
          </div>
        </div>
        <div id="colorHash">
          <input id="hexColor" value="ff0000" type="text" pattern="[\da-f]{0,6}">
        </div>
      </div>
      <div class="seperator"></div>
      <div id="spinMenu">
        <div id="spinMenuNoButton">
          Spin:<br>
          <div class="indent">
            <div>
              Axis:
              <select id="spin-axis">
                <option>x</option>
                <option>y</option>
                <option>z</option>
              </select>
            </div>
            <div class="property">
              Speed (rotations/minute): <input id="rpm" type="number" class="descrete">
            </div>
          </div>
          <br>
        </div>
        <input type="button" id="spin" class="yes" value="GO!">
      </div>
    </div>
  </div>
  <modal id="shapeCreationMenu" data-escape="okCancel" data-confirm="window.newShape(parseInt(document.getElementById('sidesInput').value))">
    Sides: <input type="number" id="sidesInput" min="3" step="1" value="4" required>
  </modal>
  <article id="documentation">
    <h2>How to use this in your own code</h2>
    <section>
      This section explains the code that makes this work, and how you can use it in your own programs. If you are interested in this, you should keep reading. If, on the other hand, you don't care about the code, then you will probably find this uninteresting. So, with that out of the way, let's begin
    </section>
    <h3>Importing Shapes.js</h3>
    <section>
      This first section explains how to import the shapes class so you can use these shapes in your code. The easiest way to do it is with the ES6 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">import statement</a>.
      <pre><code class="js"><span class="line">import { Shape } from "https://liambloom.github.io/lib/shapes.js";</span></code></pre>
      Be aware that the import statement is only avalable in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">javascript <i>modules</i></a>, meaning that your code will be in strict mode by default and that it must be imported like this:
      <pre><code class="html"><span class="line">&lt;srcipt src="my_javascript.js" type="module"></span></code></pre>
      There is a way to import it without a module, using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Dynamic_Imports">dynamic import</a>, and here is what that looks like:
      <pre><code class="js"><span class="line">import("https://liambloom.github.io/lib/shapes.js")</span>
<span class="line">  .then(shapes => shapes.Shape)</span>
<span class="line">  .then(Shape => {</span>
<span class="line">    // Your code goes here</span>
<span class="line">  });</span></code></pre>
      Or, if you'd like, you can replace the promise with async/await, making this:
      <pre><code class="js"><span class="line">(async function () {</span>
<span class="line">  const shapejs = await import("https://liambloom.github.io/lib/shapes.js");</span>
<span class="line">  const Shape = shapejs.Shape;</span>
<span class="line">  // Your code goes here
<span class="line">})();</span></code></pre>
      Whichever way you choose, you now have access to the shapes constructor, so now let's make some shapes
    </section>
    <h3>Constructor Syntax</h3>
    <section>
      <pre><code class="js"><span class="line">const myShape = new Shape(sides, config);</span></code></pre>
      <dl>
        <dt>sides</dt>
        <dd>
          This is an integer that represents the number of sides of the new shape. It must be at least three. The default value is four, making a square.
        </dd>
        <dt>config</dt>
        <dd>
          This is an object that holds all the other properties of the shape, such as:
        </dd>
        <dl>
          <dt>canvas</dt>
          <dd>
            The canvas property will tell the shape what canvas to be drawn on. The value of the canvas property should be a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas">canvas element</a>, <em>not</em> a string with the id of the canvas. It defaults to the first canvas element on the page.
          </dd>
          <dt>width</dt>
          <dd>
            The width property will tell the shape how wide to be. It is measured in px. The default is 200px wide.
          </dd>
          <dt>x</dt>
          <dd>
            The x property will tell the shape what x coordinate to be at on the canvas. The default is the center of the canvas.
          </dd>
          <dt>y</dt>
          <dd>
            The y property will tell the shape what y coordinate to be at on the canvas. The default is the center of the canvas.
          </dd>
          <dt>color</dt>
          <dd>
            The color property will tell the shape what color to be. Any CSS color value is valid. This includes color names, hex codes, and rgb/rgba values. Putting in a string that is not a valid CSS color will cause it to take on the color of the last shape drawn. The default is <span id="gray"></span>#808080, or gray.
          </dd>
          <dt>center</dt>
          <dd>
            The center property tells the shape what to center around. The two posable values are "origin" and "vertical", and they are case sensitive. Origin makes the x and y coordinates the exact center of the shape. This means that every vertex of the shape is the same distance from the shapes (x, y) coordinates. Vertical makes it so the highest point in the shape is the same distance from the (x, y) coordinates as the lowest point in the shape. <a href="#ex2">Here</a> is an interactive example for you to look at. Keep in mind that this has no affect on shapes with an even number of sides, because the two centers are the same.  The default is "origin".
          </dd>
          <dt>fps</dt>
          <dd>
            The fps property will tell the shape what framerate to spin at. The default is 60.
          </dd>
        </dl>
      </dl>
    </section>
    <h3>Drawing a shape</h3>
    <section>
      So lets try this out. We'll start simple, with just a blue square.
      <pre><code class="js"><span class="line">const myFirstShape = new Shape(4, {color: "blue"});</span></code></pre>
      You now have your square stored in the variable <code>myFirstShape</code>, but it's not showing up on the screen. To make it appear on the screen, you need to call the <code>draw</code> method. So, to recap, here's what we've made so far:
      <div class="example">
        <pre><code class="js"><span class="line">&lt;canvas id="myCanvas">&lt;/canvas></span>
<span class="line">&lt;script type="module"></span>
<span class="line">  import { Shape } from "https://liambloom.github.io/lib/shapes.js";</span>
<span class="line">  const myFirstShape = new Shape(4, {color: "blue"});</span>
<span class="line">  myFirstShape.draw();</span>
<span class="line">&lt;/script></span></code></pre>
        <canvas id="example-1" width="300" height="300"></canvas>
      </div>
      Congratulations, you made a shape! That was the hardest part, the first time you were using shapes.js. 
    </section>
    <h3>Try it out!</h3>
    <section>
      Here's an interactive example for you to test out the different properties. Click on the underlined properties to edit them.
      <div id="ex2" class="example">
        <pre><code class="html"><span class="line">&lt;canvas id="myCanvas">&lt;/canvas></span>
<span class="line">&lt;script type="module"></span>
<span class="line">  import { Shape } from "https://liambloom.github.io/lib/shapes.js";</span>
<span class="line">  const myFirstShape = new Shape(<input id="sides-interact" type="number" oninput="ex2(this)" class="interact number" min="3" step="1" value="4">, {</span>
<span class="line">    canvas: document.getElementById("myCanvas"),</span>
<span class="line">    color: "<input id="color-interact" type="text" oninput="ex2(this)" class="interact string" value="blue">",</span>
<span class="line">    width: <input id="width-interact" type="number" oninput="ex2(this)" class="interact number" min="0" max="300" step="1" value="200">,</span>
<span class="line">    x: <input id="x-interact" type="number" oninput="ex2(this)" class="interact number" min="0" max="300" step="1" value="150">,</span>
<span class="line">    y: <input id="y-interact" type="number" oninput="ex2(this)" class="interact number" min="0" max="300" step="1" value="150">,</span>
<span class="line">    center: "<input id="center-interact" type="text" oninput="ex2(this)" class="interact string" value="vertical">"</span>
<span class="line">  });</span>
<span class="line">  myFirstShape.draw();</span>
<span class="line">&lt;/script></span></code></pre>
        <canvas id="example-2" width="300" height="300"></canvas>
      </div>
    </section>
    <h3>Changing the orientation</h3>
    <section>
      The <code>draw</code> method takes three arguments, rotations on the <code>x</code>, <code>y</code>, and <code>z</code> axes. They can be numbers, which represent the rotation in degrees. By default, each is 0. You can also pass in a string. This string contains a number and a label. The number can be a float, and a space between the number and label is allowed but not required. If you want to pass in degrees, the label can be d, deg, degs, degree, or degrees. To pass in radians instead, type r, rad, rads, radian, or radians. The labels are case insensitive. Try changing the rotation values in this interactive example:
      <div id="ex3" class="example">
        <pre><code class="html"><span class="line">&lt;canvas id="myCanvas">&lt;/canvas></span>
<span class="line">&lt;script type="module"></span>
<span class="line">  import { Shape } from "https://liambloom.github.io/lib/shapes.js";</span>
<span class="line">  const myFirstShape = new Shape(3, {</span>
<span class="line">    canvas: document.getElementById("myCanvas"),</span>
<span class="line">    color: "<span class="light-hex hljs-string"></span>",</span>
<span class="line">    width: 200,</span>
<span class="line">    x: 150,</span>
<span class="line">    y: 150,</span>
<span class="line">    center: "origin"</span>
<span class="line">  });</span>
<span class="line">  myFirstShape.draw(<input id="x-rotation-interact" type="text" oninput="ex3(this)"" class="interact number" value="0"">, <input id="y-rotation-interact" type="text" oninput="ex3(this)"" class=" interact number" value="0"">, <input id="z-rotation-interact" type="text" oninput="ex3(this)"" class=" interact number" value="0"">);</span>
<span class="line">&lt;/script></span></code></pre>
        <canvas id="example-3" width="300" height="300"></canvas>
      </div>
    </section>
  </article>
</body>
</html>
