:root {
  --size: -121px;
  --angle: 0.15921773400349035rad;
  --light: #0077aa; 
  --dark: #00242b; 
  --headTxt: #0093d9; 
  --bg: #ddeeff; 
  --txt: #001215;
  --translucent: ;
}
@font-face {
  font-family: 'Anurati-Coustom';
  src: url(/fonts/Anurati-Coustom.ttf);
}
body {
	margin: 0px;
	font-family: 'Raleway', sans-serif;
	line-height: 1.15em;
	font-size: 16px;
	color: var(--txt);
	background-color: var(--bg);
}
:not(header).hidden {
  display: none !important;
}
::selection {
  color: var(--bg);
  background-color: var(--txt)
}
main {
  font-size: 14px;
  line-height: 1.35em;
  margin: 50px;
}
main.box {
  font-family: "Consolas", "Courier New", Courier, monospace;
  position: absolute;
  border: 2px solid var(--txt);
  border-radius: 2px;
  padding: 30px 28px;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 300px;
  text-align: center;
}
.center {
  text-align: center;
}
.right {
	text-align: right;
}
.flex {
  display: flex;
}
.inline {
  display: inline;
}
.indent {
  margin-left: 15px !important;
}
a {
	color: var(--txt);
}
.topFixed {
	grid-area: main;
}
table {
  border-collapse: collapse;
}
td, th {
  border: 2px solid var(--txt);
  padding: 10px;
}
.not-bold {
  font-weight: normal;
}
.float-right {
  float: right;
}
.subtext {
  font-size: 10px;
  float: right;
}
.underlined {
  text-decoration: underline;
}
.wide {
	width: 100px;
}
.tag {
  color: #ffffff;
  display: inline-block;
  border-radius: 5px;
  padding: 10px;
  font-size: 20px;
  white-space: nowrap;
}
.circle {
  display: inline-block;
  text-align: center;
  font-size: 16px;
  height: 16px;
  width: 16px;
  border: 3px solid #ffffff;
  border-radius: 50%;
  margin-right: 5px;
  transform: translateY(1.5px);
}
.circle span {
  display: inline-block;
}
.circle.high span {
  transform: translateY(0px);
}
.circle.middle span {
  transform: translateY(-3px);
}
.circle.low span {
  transform: translateY(-7px);
}
@supports (height: max-content) {
  #context.box {
    height: max-content;
  }
}
@supports (height: -webkit-max-content) and (not (height: max-content)) {
  #context.box {
    height: -webkit-max-content;
  }
}
@supports not ((height: max-content) or (height: -webkit-max-content)) {
  #context.box {
    height: initial;
  }
}